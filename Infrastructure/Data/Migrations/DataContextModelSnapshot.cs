// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("Core.Entities.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BPOIndustry")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BankingInstitution")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommunicationCompany")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EducationalInstitution")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GovermentOffices")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ITIndustry")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Insurances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MultinationalCompany")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Other")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrivateInstitution")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("CompanyTypes");
                });

            modelBuilder.Entity("Core.Entities.CompentencyLearningInCollege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CommunicationSkill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CriticalThinkingSkill")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntrepreneurialSkill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HumanRelationSkill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ITSkill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OtherSkill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProblemSolvingSkill")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("CompentencyLearningInColleges");
                });

            modelBuilder.Entity("Core.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ACT")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BSCS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BSIT")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("YearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Core.Entities.CurrentFirstJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FirstJobDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("No")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Yes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FirstJobDetailId")
                        .IsUnique();

                    b.ToTable("CurrentFirstJobs");
                });

            modelBuilder.Entity("Core.Entities.DifficultiesEncounterFirstJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FirstJobDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LackOfExp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LackOfSkill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LowCompenOffer")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LowOpporAdvancement")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoAvailJob")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Other")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FirstJobDetailId")
                        .IsUnique();

                    b.ToTable("DifficultiesEncounterFirstJob");
                });

            modelBuilder.Entity("Core.Entities.EducationalDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("YearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.ToTable("EducationalDetails");
                });

            modelBuilder.Entity("Core.Entities.ElectiveSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score5")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("ElectiveSubjects");
                });

            modelBuilder.Entity("Core.Entities.EmployedAfterGraduation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("No")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Yes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployedAfterGraduations");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("YearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Entities.EmploymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Casual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Contractual")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PartTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Probitionary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Regular")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Temporary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmploymentStatuses");
                });

            modelBuilder.Entity("Core.Entities.FindFirstJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ArrangedByTheSchool")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AsWalkInApplicant")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FamilyBusiness")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FirstJobDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("InformationFromFriends")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobFairForPeso")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Other")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecommendedBySomeone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToAnAdvertisement")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FirstJobDetailId")
                        .IsUnique();

                    b.ToTable("FindFirstJobs");
                });

            modelBuilder.Entity("Core.Entities.FirstJobDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("YearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.ToTable("FirstJobDetails");
                });

            modelBuilder.Entity("Core.Entities.FirstJobRelatedCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FirstJobDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("No")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Yes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FirstJobDetailId")
                        .IsUnique();

                    b.ToTable("FirstJobRelatedCourses");
                });

            modelBuilder.Entity("Core.Entities.Ged", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score5")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("Geds");
                });

            modelBuilder.Entity("Core.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Female")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Male")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("YearId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("YearId")
                        .IsUnique();

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Core.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Course")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Quote")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Identity.JobFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId")
                        .IsUnique();

                    b.ToTable("JobFiles");
                });

            modelBuilder.Entity("Core.Entities.Identity.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserPhotoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserPhotoId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("Core.Entities.Identity.ProofPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("ProofPhotos");
                });

            modelBuilder.Entity("Core.Entities.Identity.UserPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("Core.Entities.ITCertification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score5")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("ITCertifications");
                });

            modelBuilder.Entity("Core.Entities.JobPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Clerical")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Managerial")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Other")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SelfEmployed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Supervisory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("Core.Entities.LandFirstJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FirstJobDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LessThanAMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthFourToSix")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthOneToThree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthSevenToEleven")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Others")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearOneToTwo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearThreeToFour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearTwoToThree")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FirstJobDetailId")
                        .IsUnique();

                    b.ToTable("LandFirstJobs");
                });

            modelBuilder.Entity("Core.Entities.Ojt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score5")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("Ojts");
                });

            modelBuilder.Entity("Core.Entities.PresentJobRelatedCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("No")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Yes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("PresentJobRelatedCourses");
                });

            modelBuilder.Entity("Core.Entities.PresentlyEmployed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("No")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Yes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("PresentlyEmployeds");
                });

            modelBuilder.Entity("Core.Entities.ProfessionalSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score5")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("ProfessionalSubjects");
                });

            modelBuilder.Entity("Core.Entities.ReasonForUnemployed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DidNotLookForJob")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("FamilyConcern")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HealthReason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InadeqSkill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LackOfExp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LackOfInterest")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoJobOpport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Other")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PursingAdvanceStudies")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnsatisfactoryOffer")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("ReasonForUnemployeds");
                });

            modelBuilder.Entity("Core.Entities.ReasonTakingFirstJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CareerChallenge")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FirstJobDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Other")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProximtyMyResidence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelatedSpecialSkil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Salary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FirstJobDetailId")
                        .IsUnique();

                    b.ToTable("ReasonTakingFirstJobs");
                });

            modelBuilder.Entity("Core.Entities.Seminar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EducationalDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score5")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EducationalDetailId")
                        .IsUnique();

                    b.ToTable("Seminars");
                });

            modelBuilder.Entity("Core.Entities.StayFirstJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FirstJobDetailId")
                        .HasColumnType("TEXT");

                    b.Property<int>("LessThanAMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthFourToSix")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthOneToThree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthSevenToEleven")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Others")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearOneToTwo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearThreeToFour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearTwoToThree")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FirstJobDetailId")
                        .IsUnique();

                    b.ToTable("StayFirstJobs");
                });

            modelBuilder.Entity("Core.Entities.Year", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("GraduatedSchoolYear")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CompanyType", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithOne("CompanyType")
                        .HasForeignKey("Core.Entities.CompanyType", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.CompentencyLearningInCollege", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("CompentencyLearningInCollege")
                        .HasForeignKey("Core.Entities.CompentencyLearningInCollege", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.Course", b =>
                {
                    b.HasOne("Core.Entities.Year", "Year")
                        .WithOne("Course")
                        .HasForeignKey("Core.Entities.Course", "YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Core.Entities.CurrentFirstJob", b =>
                {
                    b.HasOne("Core.Entities.FirstJobDetail", "FirstJobDetail")
                        .WithOne("CurrentFirstJob")
                        .HasForeignKey("Core.Entities.CurrentFirstJob", "FirstJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstJobDetail");
                });

            modelBuilder.Entity("Core.Entities.DifficultiesEncounterFirstJob", b =>
                {
                    b.HasOne("Core.Entities.FirstJobDetail", "FirstJobDetail")
                        .WithOne("DifficultiesEncounterFirstJob")
                        .HasForeignKey("Core.Entities.DifficultiesEncounterFirstJob", "FirstJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstJobDetail");
                });

            modelBuilder.Entity("Core.Entities.EducationalDetail", b =>
                {
                    b.HasOne("Core.Entities.Year", "Year")
                        .WithOne("EducationalDetail")
                        .HasForeignKey("Core.Entities.EducationalDetail", "YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Core.Entities.ElectiveSubject", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("ElectiveSubject")
                        .HasForeignKey("Core.Entities.ElectiveSubject", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.EmployedAfterGraduation", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithOne("EmployedAfterGraduation")
                        .HasForeignKey("Core.Entities.EmployedAfterGraduation", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.HasOne("Core.Entities.Year", "Year")
                        .WithOne("Employee")
                        .HasForeignKey("Core.Entities.Employee", "YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Core.Entities.EmploymentStatus", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithOne("EmploymentStatus")
                        .HasForeignKey("Core.Entities.EmploymentStatus", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.FindFirstJob", b =>
                {
                    b.HasOne("Core.Entities.FirstJobDetail", "FirstJobDetail")
                        .WithOne("FindFirstJob")
                        .HasForeignKey("Core.Entities.FindFirstJob", "FirstJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstJobDetail");
                });

            modelBuilder.Entity("Core.Entities.FirstJobDetail", b =>
                {
                    b.HasOne("Core.Entities.Year", "Year")
                        .WithOne("FirstJobDetail")
                        .HasForeignKey("Core.Entities.FirstJobDetail", "YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Core.Entities.FirstJobRelatedCourse", b =>
                {
                    b.HasOne("Core.Entities.FirstJobDetail", "FirstJobDetail")
                        .WithOne("FirstJobRelatedCourse")
                        .HasForeignKey("Core.Entities.FirstJobRelatedCourse", "FirstJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstJobDetail");
                });

            modelBuilder.Entity("Core.Entities.Ged", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("Ged")
                        .HasForeignKey("Core.Entities.Ged", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.Gender", b =>
                {
                    b.HasOne("Core.Entities.Year", "Year")
                        .WithOne("Gender")
                        .HasForeignKey("Core.Entities.Gender", "YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Core.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Identity.JobFile", b =>
                {
                    b.HasOne("Core.Entities.Identity.JobPost", "JobPost")
                        .WithOne("JobFile")
                        .HasForeignKey("Core.Entities.Identity.JobFile", "JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("Core.Entities.Identity.JobPost", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppUser", "AppUser")
                        .WithMany("JobPosts")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Core.Entities.Identity.UserPhoto", "UserPhoto")
                        .WithMany()
                        .HasForeignKey("UserPhotoId");

                    b.Navigation("AppUser");

                    b.Navigation("UserPhoto");
                });

            modelBuilder.Entity("Core.Entities.Identity.ProofPhoto", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppUser", "AppUser")
                        .WithOne("ProofPhoto")
                        .HasForeignKey("Core.Entities.Identity.ProofPhoto", "AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Core.Entities.Identity.UserPhoto", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppUser", "AppUser")
                        .WithOne("UserPhoto")
                        .HasForeignKey("Core.Entities.Identity.UserPhoto", "AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Core.Entities.ITCertification", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("ITCertification")
                        .HasForeignKey("Core.Entities.ITCertification", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.JobPosition", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithOne("JobPosition")
                        .HasForeignKey("Core.Entities.JobPosition", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.LandFirstJob", b =>
                {
                    b.HasOne("Core.Entities.FirstJobDetail", "FirstJobDetail")
                        .WithOne("LandFirstJob")
                        .HasForeignKey("Core.Entities.LandFirstJob", "FirstJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstJobDetail");
                });

            modelBuilder.Entity("Core.Entities.Ojt", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("Ojt")
                        .HasForeignKey("Core.Entities.Ojt", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.PresentJobRelatedCourse", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("PresentJobRelatedCourse")
                        .HasForeignKey("Core.Entities.PresentJobRelatedCourse", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.PresentlyEmployed", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithOne("PresentlyEmployed")
                        .HasForeignKey("Core.Entities.PresentlyEmployed", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.ProfessionalSubject", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("ProfessionalSubject")
                        .HasForeignKey("Core.Entities.ProfessionalSubject", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.ReasonForUnemployed", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithOne("ReasonForUnemployed")
                        .HasForeignKey("Core.Entities.ReasonForUnemployed", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.ReasonTakingFirstJob", b =>
                {
                    b.HasOne("Core.Entities.FirstJobDetail", "FirstJobDetail")
                        .WithOne("ReasonTakingFirstJob")
                        .HasForeignKey("Core.Entities.ReasonTakingFirstJob", "FirstJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstJobDetail");
                });

            modelBuilder.Entity("Core.Entities.Seminar", b =>
                {
                    b.HasOne("Core.Entities.EducationalDetail", "EducationalDetail")
                        .WithOne("Seminar")
                        .HasForeignKey("Core.Entities.Seminar", "EducationalDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationalDetail");
                });

            modelBuilder.Entity("Core.Entities.StayFirstJob", b =>
                {
                    b.HasOne("Core.Entities.FirstJobDetail", "FirstJobDetail")
                        .WithOne("StayFirstJob")
                        .HasForeignKey("Core.Entities.StayFirstJob", "FirstJobDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstJobDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EducationalDetail", b =>
                {
                    b.Navigation("CompentencyLearningInCollege");

                    b.Navigation("ElectiveSubject");

                    b.Navigation("Ged");

                    b.Navigation("ITCertification");

                    b.Navigation("Ojt");

                    b.Navigation("PresentJobRelatedCourse");

                    b.Navigation("ProfessionalSubject");

                    b.Navigation("Seminar");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.Navigation("CompanyType");

                    b.Navigation("EmployedAfterGraduation");

                    b.Navigation("EmploymentStatus");

                    b.Navigation("JobPosition");

                    b.Navigation("PresentlyEmployed");

                    b.Navigation("ReasonForUnemployed");
                });

            modelBuilder.Entity("Core.Entities.FirstJobDetail", b =>
                {
                    b.Navigation("CurrentFirstJob");

                    b.Navigation("DifficultiesEncounterFirstJob");

                    b.Navigation("FindFirstJob");

                    b.Navigation("FirstJobRelatedCourse");

                    b.Navigation("LandFirstJob");

                    b.Navigation("ReasonTakingFirstJob");

                    b.Navigation("StayFirstJob");
                });

            modelBuilder.Entity("Core.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("ProofPhoto");

                    b.Navigation("UserPhoto");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Identity.JobPost", b =>
                {
                    b.Navigation("JobFile");
                });

            modelBuilder.Entity("Core.Entities.Year", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("EducationalDetail");

                    b.Navigation("Employee");

                    b.Navigation("FirstJobDetail");

                    b.Navigation("Gender");
                });
#pragma warning restore 612, 618
        }
    }
}
